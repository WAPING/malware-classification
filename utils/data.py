from __future__ import absolute_import
from __future__ import division
from __future__ import print_function

__version__="0.1.0"
__author__="WAPING"


import matplotlib.pyplot as plt
import numpy as np
import os
from sklearn.metrics import accuracy_score
from sklearn.metrics import classification_report
from sklearn.metrics import confusion_matrix
from sklearn.preprocessing import StandardScaler
import tensorflow as tf

def save_labels(predictions,actual,result_path,phase,step):
    """saves the actual and prediction labels to a NPY
    
    :param predictions: The NumPy array containing the predicted labels.
    :param actual: the NumPy array containing the actual labels.
    :param result_path: The path where to save the concatenated actual and predicted labels.
    :param phase: The phase for which the predictions is, i.e. training/validation/testing.
    :param step: The time step for the NumPy arrays.
    :return: 
    """
    if not os.path.exists(result_path):
        os.mkdir(result_path)

    labels=np.concatenate((predictions,actual),axis=1)

    np.save(file=os.path.join(result_path,'{}-{}.npy'.format(phase,step)),arr=labels)

def load_data(dataset,standardize=True):
    """
    
    :param dataset: 
    :param standardize: 
    :return: 
    """
    #todo 继续代码编写