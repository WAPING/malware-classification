#!/usr/bin/env python 3.6
# -*- coding: utf-8 -*-
# @File  : rnn_svm.py
# @Author: wang anping
# @Date  : 2018/11/20
# @Desc  : 
# @Contact : 15236759872@163.com
# @Software : PyCharm
from __future__ import absolute_import
from __future__ import division
from __future__ import print_function

import numpy as np
import tensorflow as tf
from .attention import attention
from tensorflow.python.ops.rnn import bidirectional_dynamic_rnn as bi_rnn
from tensorflow.contrib.rnn import GRUCell
import os
import sys
import time
from utils.data import save_labels
from utils.svm import svm_loss

ATTENTION_SIZE = 50


class RNNSVm:
    """
    
    """

    def __init__(self, alpha, batch_size, cell_size, dropout_rate, num_classes, num_layers,
                 sequence_height, sequence_width, svm_c):
        """      
        :param alpha: 
        :param batch_size: 
        :param cell_size: the size of cell state
        :param dropout_rate: 
        :param num_classes: 
        :param num_layers: the number of hidden layers
        :param sequence_height: 
        :param sequence_width: 
        :param svm_c: the SVM penalty parameter C
        """
        self.alpha = alpha
        self.batch_size = batch_size
        self.cell_size = cell_size
        self.dropout_rate = dropout_rate
        self.name = 'RNN-SVM'
        self.num_classes = num_classes
        self.num_layers = num_layers
        self.sequence_height = sequence_height
        self.sequence_width = sequence_width
        self.svm_c = svm_c

        def __graph__():
            with tf.name_scope('input'):
                x_input = tf.placeholder(dtype=tf.float32, shape=[None, sequence_width, sequence_height],
                                         name='x_input')
                y_input = tf.placeholder(dtype=tf.float32, shape=[None, num_classes], name='y_input')

            # state = tf.placeholder(dtype=tf.float32, shape=[None, self.cell_size * self.num_layers],
            #                        name='initial_state')
            p_keep = tf.placeholder(dtype=tf.float32, name='p_keep')

            learning_rate = tf.placeholder(dtype=tf.float32, name='learning_rate')

            hidden_size = int(sequence_width)
            # seq_len = tf.Variable(tf.constant(hidden_size),name='seq_len')

            rnn_outputs, _ = bi_rnn(GRUCell(hidden_size), GRUCell(hidden_size),
                                    inputs=x_input, sequence_length=None, dtype=tf.float32)
            tf.summary.histogram('RNN_outputs', rnn_outputs)

            # Attention layer
            with tf.name_scope('Attention_layer'):
                attention_output, alphas = attention(input=rnn_outputs, hidden_size=self.sequence_width,
                                                     attention_size=ATTENTION_SIZE, return_alpha=True)
                tf.summary.histogram('alphas', alphas)

            # dropout
            drop = tf.nn.dropout(attention_output, keep_prob=p_keep)

            # fully connected layer
            with tf.name_scope('Fully_connected_layer'):
                W = tf.Variable(tf.truncated_normal([hidden_size * 2, self.num_classes], stddev=0.1), name='W')
                b = tf.Variable(tf.constant(0.0, shape=[self.num_classes]), name='b')
                y_hat = tf.nn.xw_plus_b(drop, W, b)
                # y_hat=tf.squeeze(y_hat)
                tf.summary.histogram('W', W)

            with tf.name_scope('loss'):
                loss = svm_loss(labels=y_input, logits=y_hat, num_classes=self.num_classes,
                                penalty_parameter=self.svm_c,
                                weight=W)
            tf.summary.scalar('loss', loss)

            optimizer = tf.train.AdamOptimizer(learning_rate=learning_rate).minimize(loss=loss)

            with tf.name_scope('accuracy'):
                predicted_class = tf.sign(y_hat)
                predicted_class = tf.identity(predicted_class, name='predicted_class')
                with tf.name_scope('correct_prediction'):
                    correct = tf.equal(tf.argmax(predicted_class, 1), tf.argmax(y_input, 1))
                with tf.name_scope('accuracy'):
                    accuracy = tf.reduce_mean(tf.cast(correct, 'float'))
            tf.summary.scalar('accuracy', accuracy)

            merged = tf.summary.merge_all()

            # set class properties
            self.x_input = x_input
            self.y_input = y_input
            self.p_keep = p_keep
            self.loss = loss
            self.optimizer = optimizer
            # self.state=state
            # self.states=states
            self.learning_rate = learning_rate
            self.predicted_class = predicted_class
            self.accuracy = accuracy
            self.merged = merged

        sys.stdout.write('\n<log> Building Graph..')
        __graph__()
        sys.stdout.write('</log>\n')

    def train(self, checkpoint_path, log_path, epochs, train_data, train_size, test_data, test_size,
              result_path):
        """
        :param checkpoint_path: The path where to save the trained model.
        :param log_path: The path where to save the TensorBoard summaries.
        :param epochs: The number of passes through the whole dataset.
        :param train_data: The NumPy array training dataset.
        :param train_size: The size of `train_data`.
        :param test_data: The NumPy array testing dataset.
        :param test_size: The size of `test_data`.
        :param result_path: The path where to save the actual and predicted classes array.
        :return:
        """

        if not os.path.exists(path=checkpoint_path):
            os.mkdir(path=checkpoint_path)

        if not os.path.exists(path=log_path):
            os.mkdir(path=log_path)

        saver = tf.train.Saver(max_to_keep=2)

        # initialize H (current_state) with values of zeros
        # current_state = np.zeros([self.batch_size, self.cell_size * self.num_layers])

        # variables initializer
        init_op = tf.group(tf.global_variables_initializer(), tf.local_variables_initializer())

        # get the time tuple
        timestamp = str(time.asctime())
        timestamp = timestamp.replace(':', '-')

        train_writer = tf.summary.FileWriter(logdir=log_path + timestamp + '-training', graph=tf.get_default_graph())
        test_writer = tf.summary.FileWriter(logdir=log_path + timestamp + '-testing',
                                            graph=tf.get_default_graph())

        with tf.Session() as sess:

            sess.run(init_op)

            checkpoint = tf.train.get_checkpoint_state(checkpoint_path)

            if checkpoint and checkpoint.model_checkpoint_path:
                saver = tf.train.import_meta_graph(checkpoint.model_checkpoint_path + '.meta')
                saver.restore(sess, tf.train.latest_checkpoint(checkpoint_path))
                print('Loading {}'.format(tf.train.latest_checkpoint(checkpoint_dir=checkpoint_path)))

            try:
                for step in range(epochs * train_size // self.batch_size):

                    # set the value for slicing
                    # e.g. step = 0, batch_size = 256, train_size = 1898240
                    # (0 * 256) % 1898240 = 0
                    # [offset:(offset + batch_size)] = [0:256]
                    offset = (step * self.batch_size) % train_size
                    train_example_batch = train_data[0][offset:(offset + self.batch_size)]
                    train_label_batch = train_data[1][offset:(offset + self.batch_size)]

                    # dictionary for key-value pair input for training
                    feed_dict = {self.x_input: train_example_batch, self.y_input: train_label_batch,
                                 # self.state: current_state,
                                 self.learning_rate: self.alpha, self.p_keep: self.dropout_rate}

                    # train_summary, _, predictions, actual, next_state = sess.run([self.merged, self.optimizer,
                    #                                                               self.predicted_class, self.y_input,
                    #                                                               self.states],
                    #                                                              feed_dict=feed_dict)
                    train_summary, _, predictions, actual = sess.run([self.merged, self.optimizer,
                                                                      self.predicted_class, self.y_input],
                                                                     feed_dict=feed_dict)

                    # Display training loss and accuracy every 100 steps and at step 0
                    if step % 100 == 0:
                        # get train loss and accuracy
                        train_loss, train_accuracy = sess.run([self.loss, self.accuracy], feed_dict=feed_dict)

                        # display train loss and accuracy
                        print('step [{}] train -- loss : {}, accuracy : {}'.format(step, train_loss, train_accuracy))

                        # write the train summary
                        train_writer.add_summary(train_summary, step)

                        # save the model at current step
                        saver.save(sess, os.path.join(checkpoint_path, self.name), global_step=step)

                    # current_state = next_state

                    save_labels(predictions=predictions, actual=actual, result_path=result_path, step=step,
                                model=self.name, phase='training')

            except KeyboardInterrupt:
                print('Training interrupted at {}'.format(step))
                os._exit(1)
            finally:
                print('EOF -- Training done at step {}'.format(step))

                # for step in range(epochs * test_size // self.batch_size):
                #
                #     offset = (step * self.batch_size) % test_size
                #     test_example_batch = test_data[0][offset:(offset + self.batch_size)]
                #     test_label_batch = test_data[1][offset:(offset + self.batch_size)]
                #
                #     # dictionary for key-value pair input for testing
                #     feed_dict = {self.x_input: test_example_batch, self.y_input: test_label_batch,
                #                  self.state: np.zeros([self.batch_size, self.cell_size * self.num_layers]),
                #                  self.p_keep: 1.0}
                #
                #     test_summary, predictions, actual, test_loss, test_accuracy = \
                #         sess.run([self.merged, self.predicted_class, self.y_input, self.loss, self.accuracy],
                #                  feed_dict=feed_dict)
                #
                #     # Display test loss and accuracy every 100 steps
                #     if step % 100 == 0 and step > 0:
                #         # add the test summary
                #         test_writer.add_summary(summary=test_summary, global_step=step)
                #
                #         # display test loss and accuracy
                #         print('step [{}] test -- loss : {}, accuracy : {}'.format(step, test_loss, test_accuracy))
                #
                #     save_labels(predictions=predictions, actual=actual, result_path=result_path, step=step,
                #                 model=self.name, phase='testing')
                #
                # print('EOF -- Testing done at step {}'.format(step))

    @staticmethod
    def variable_summaries(var):
        with tf.name_scope('summaries'):
            mean = tf.reduce_mean(var)
            tf.summary.scalar('mean', mean)
            with tf.name_scope('stddev'):
                stddev = tf.sqrt(tf.reduce_mean(tf.square(var - mean)))
            tf.summary.scalar('stddev', stddev)
            tf.summary.scalar('max', tf.reduce_max(var))
            tf.summary.scalar('min', tf.reduce_min(var))
            tf.summary.histogram('histogram', var)
